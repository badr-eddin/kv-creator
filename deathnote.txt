************************************************************************************
re.compile(r"\s+|\w+|\W") <- tokenize text in order to use it in qscintilla lexer
token_list = [ (token, len(bytearray(token, "utf-8"))) for token in p.findall(text)]
************************************************************************************
[start:end]

            splitter = re.compile(r"(\{\.|\.\}|\#|\'\'\'|\"\"\"|\n|\s+|\w+|\W)")
            tokens = [(token, len(token)) for token in splitter.findall(text)]

            for token, length in tokens:
                if not length:
                    continue

                if token in ('"', "'"):
                    if self.settings.string == token:
                        self.settings.string = self.settings.FLAGS.kill
                    else:
                        self.settings.string = token

                if token == "#":
                    self.settings.comment = True

                if token == "\n":
                    self.settings.comment = False

                if self.settings.string:
                    if self.settings.string == self.settings.FLAGS.kill:
                        self.settings.string = self.settings.FLAGS.dead

                    self.setStyling(length, self.styles.get("string"))

                else:
                    self.setStyling(length, self.styles.get("default"))

                # if self.settings.comment:
                #     self.setStyling(length, self.styles.get("comment"))

************************************************************************************

class CodeInspectionLexer(QsciLexerCustom):
    ERROR = 0
    WARNING = 1
    REFACTOR = 2
    CONVENTION = 3
    MESSAGE = 4
    LINE_POSITION = 5

    def __init__(self, parent, main):
        super(CodeInspectionLexer, self).__init__(parent)
        self.main = main

        self.setColor(color("error"), self.ERROR)
        self.setColor(color("c1"), self.WARNING)
        self.setColor(color("comment"), self.REFACTOR)
        self.setColor(color("c2"), self.CONVENTION)
        self.setColor(color("c3"), self.MESSAGE)
        self.setColor(color("c7"), self.LINE_POSITION)

    def styleText(self, start: int, end: int):
        # finding errors
        ...

    def language(self):
        return "CodeInspection"

    def description(self, sty: int):
        return f"description of {sty}"


class CodeInspection(QsciScintilla):
    def __init__(self, parent, main):
        super(CodeInspection, self).__init__(parent)
        self.main = main

        self.setReadOnly(True)
        self.setLexer(CodeInspectionLexer(self, self.main))

************************************************************************************